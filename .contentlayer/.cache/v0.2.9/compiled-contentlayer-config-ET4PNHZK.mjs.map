{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/contentlayer/utils.ts", "../../../src/contentlayer/plugins/pretty-code.ts", "../../../src/contentlayer/plugins/autolink-headings.ts"],
  "sourcesContent": ["import { Course } from \"contentlayer/documents/Course\";\r\nimport { makeSource } from \"contentlayer/source-files\";\r\nimport { contentDirPath } from \"./src/contentlayer/utils\";\r\nimport slug from \"rehype-slug\";\r\nimport prettyCode from \"./src/contentlayer/plugins/pretty-code\";\r\nimport autolinkHeadings from \"./src/contentlayer/plugins/autolink-headings\";\r\n\r\nexport default makeSource({\r\n    contentDirPath,\r\n    documentTypes: [Course],\r\n    mdx: {\r\n        rehypePlugins: [slug, autolinkHeadings, prettyCode],\r\n    }\r\n});", "import type { DocumentGen } from \"contentlayer/core\";\r\nimport GithubSlugger from \"github-slugger\";\r\n\r\nexport const contentDirPath = \"content/courses\";\r\n\r\nexport type DocHeading = {\r\n    level?: 1 | 2 | 3 | 4 | 5 | 6;\r\n    text?: string;\r\n    slug?: string;\r\n};\r\n\r\n// props to https://youssefbouzekri.vercel.app/posts/contentlayer-table-of-contents\r\nexport const getHeadings = async (doc: DocumentGen): Promise<DocHeading[]> => {\r\n    const regXHeader = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\r\n    const slugger = new GithubSlugger();\r\n    // TODO: instead of map, use reduce and only return object if **not undefined**\r\n    const headings: DocHeading[] = Array.from(doc.body.raw.matchAll(regXHeader)).map(({ groups }: any) => {\r\n        const flag = groups?.flag;\r\n        const content = groups?.content;\r\n        return {\r\n            level: flag?.length as keyof DocHeading[\"level\"], // DISCUSS: better ts support\r\n            text: content,\r\n            slug: content ? slugger.slug(content) : undefined,\r\n        };\r\n    });\r\n\r\n    return headings;\r\n};\r\n\r\nexport type PathSegments = {\r\n    order: number;\r\n    pathName: string;\r\n}[];\r\n\r\n// props to https://github.com/contentlayerdev/website/blob/main/src/contentlayer/document/Doc.ts\r\nexport const getPathSegments = async (doc: DocumentGen): Promise<PathSegments> => {\r\n    return doc._raw.flattenedPath.split(\"/\").map((dirName: string) => {\r\n        const re = /^((\\d+)-)?(.*)$/;\r\n        const [, , orderStr, pathName] = dirName.match(re) ?? [];\r\n        const order = orderStr ? parseInt(orderStr) : 0;\r\n\r\n        return { order, pathName };\r\n    });\r\n};\r\n\r\nexport const getUrl = async (doc: DocumentGen) => {\r\n    return doc._raw.flattenedPath.split(\"/\").reduce((prev: any, curr: any) => {\r\n        const re = /^((\\d+)-)?(.*)$/;\r\n        const [, , orderStr, pathName] = curr.match(re) ?? [];\r\n        \r\n        return `${prev}/${pathName}`;\r\n    }, \"\");\r\n};", "import rehypePrettyCode from \"rehype-pretty-code\";\r\nimport type * as unified from \"unified\";\r\n\r\n// props to https://rehype-pretty-code.netlify.app/\r\n\r\nconst prettyCode: unified.Pluggable<any[]> = [\r\n  rehypePrettyCode,\r\n  {\r\n    theme: \"github-light\",\r\n    onVisitLine(node: any) {\r\n      // Prevent lines from collapsing in `display: grid` mode, and\r\n      // allow empty lines to be copy/pasted\r\n      if (node.children.length === 0) {\r\n        node.children = [{ type: \"text\", value: \" \" }];\r\n      }\r\n    },\r\n    onVisitHighlightedLine(node: any) {\r\n      node.properties.className.push(\"highlighted\");\r\n    },\r\n    onVisitHighlightedWord(node: any) {\r\n      node.properties.className = [\"word\"];\r\n    },\r\n  },\r\n];\r\n\r\nexport default prettyCode;", "import rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport type * as unified from \"unified\";\r\n\r\nconst autolinkHeadings: unified.Pluggable<any[]> = [\r\n  rehypeAutolinkHeadings,\r\n  {\r\n    behavior: \"append\",\r\n    properties: {\r\n      className: [\r\n        \"no-underline after:content-['#'] ml-1 after:text-gray-200 hover:after:text-brand-500 hover:after:bg-brand-50 after:rounded-md after:p-1\",\r\n      ],\r\n    },\r\n  },\r\n];\r\n\r\nexport default autolinkHeadings;"],
  "mappings": ";AAAA,SAAS,cAAc;AACvB,SAAS,kBAAkB;;;ACA3B,OAAO,mBAAmB;AAEnB,IAAM,iBAAiB;;;ADA9B,OAAO,UAAU;;;AEHjB,OAAO,sBAAsB;AAK7B,IAAM,aAAuC;AAAA,EAC3C;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,YAAY,MAAW;AAGrB,UAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,aAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,MAC/C;AAAA,IACF;AAAA,IACA,uBAAuB,MAAW;AAChC,WAAK,WAAW,UAAU,KAAK,aAAa;AAAA,IAC9C;AAAA,IACA,uBAAuB,MAAW;AAChC,WAAK,WAAW,YAAY,CAAC,MAAM;AAAA,IACrC;AAAA,EACF;AACF;AAEA,IAAO,sBAAQ;;;ACzBf,OAAO,4BAA4B;AAGnC,IAAM,mBAA6C;AAAA,EACjD;AAAA,EACA;AAAA,IACE,UAAU;AAAA,IACV,YAAY;AAAA,MACV,WAAW;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAO,4BAAQ;;;AHRf,IAAO,8BAAQ,WAAW;AAAA,EACtB;AAAA,EACA,eAAe,CAAC,MAAM;AAAA,EACtB,KAAK;AAAA,IACD,eAAe,CAAC,MAAM,2BAAkB,mBAAU;AAAA,EACtD;AACJ,CAAC;",
  "names": []
}
